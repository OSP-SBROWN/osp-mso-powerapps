ComponentDefinitions:
  ButtonComp:
    DefinitionType: CanvasComponent
    AccessAppScope: true
    CustomProperties:
      Disabled:
        PropertyKind: Input
        DisplayName: Disabled
        Description: A custom property
        DataType: Boolean
        Default: =true
      FillDisabled:
        PropertyKind: Input
        DisplayName: FillDisabled
        Description: A custom property
        DataType: Color
        Default: =App.Theme.Colors.Darker50
      FillHover:
        PropertyKind: Input
        DisplayName: FillHover
        Description: A custom property
        DataType: Color
        Default: =App.Theme.Colors.Primary
      FillPressed:
        PropertyKind: Input
        DisplayName: FillPressed
        Description: A custom property
        DataType: Color
        Default: =App.Theme.Colors.Primary
      FillRest:
        PropertyKind: Input
        DisplayName: FillRest
        Description: A custom property
        DataType: Color
        Default: =Color.White
      IconColor:
        PropertyKind: Input
        DisplayName: IconColor
        Description: A custom property
        DataType: Color
        Default: =RGBA(0, 0, 0, 1)
      IconKey:
        PropertyKind: Input
        DisplayName: IconKey
        Description: A custom property
        DataType: Text
        Default: ="Play"
      OnSelectAction:
        PropertyKind: Event
        DisplayName: OnSelectAction
        Description: A custom property
        ReturnType: None
        Default: =
      Size:
        PropertyKind: Input
        DisplayName: Size
        Description: A custom property
        DataType: Number
        Default: =100
      TooltipText:
        PropertyKind: Input
        DisplayName: TooltipText
        Description: A custom property
        DataType: Text
        Default: ="Text"
    Properties:
      Height: =100
      OnReset: =Notify("You clicked on " & ButtonComp.IconKey)
      Width: =100
    Children:
      - HtmlText2_1:
          Control: HtmlViewer@2.1.0
          Properties:
            Height: =Parent.Height
            HtmlText: |
              =// Render ThisItem.Path (a full <svg>) with theme colour using JSON→rgba,
              // then show it via an <img src="data:image/svg+xml;utf8,..."> data URI.

              With(
                  {
                      // 1) Source SVG (or a tiny fallback)


                      // 2) Make fills/strokes colorable and strip fixed size
                      svgSanitized:
                          Substitute(
                              Substitute(
                                  Substitute(
                                      Substitute(
                                          Substitute(
                                              Substitute(Coalesce(
                              LookUp(GoogleMaterialIcons,IconName=ButtonComp.IconKey).Path,
                              "<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='currentColor'/>"
                          ),
                                                  "fill=""#", "fill=""currentColor"""),
                                              "fill='#", "fill='currentColor'"),
                                          "stroke=""#", "stroke=""currentColor"""),
                                      "stroke='#", "stroke='currentColor'"),
                                  "height=""24px""",""),
                              "width=""24px""",""),

                      // 3) Theme colour → CSS rgba() using JSON() trick
                      rgba:
                          Substitute(JSON(App.Theme.Colors.Darker60), """", "")
                  },
                  // 4) Build final SVG with a style="color: ..." on the <svg> root
                  With(
                      {
                          svgColored:
                              If(
                                  Or(Find("style=""", svgSanitized) > 0, Find("style='", svgSanitized) > 0),
                                  // already has style → prepend color (handle " and ')
                                  If(
                                      Find("style=""", svgSanitized) > 0,
                                      Substitute(svgSanitized, "style=""", "style=""color:" & rgba & "; "),
                                      Substitute(svgSanitized, "style='",  "style='color:" & rgba & "; ")
                                  ),
                                  // no style → add one
                                  Substitute(svgSanitized, "<svg", "<svg style='color:" & rgba & "'")
                              )
                      },
                      // 5) Emit <img> with data URI (works in all tenants)
                      "<div style='width:95%;height:95%;display:flex;align-items:center;justify-content:center;'>
                         <img src='" &
                           ("data:image/svg+xml;utf8," & EncodeUrl(svgColored)) &
                           "' alt='" & ButtonComp.IconKey &
                           "' style='display:block;width:95%;height:95%;'/>
                       </div>"
                  )
              )
            OnSelect: =
            PaddingBottom: =0
            PaddingLeft: =0
            PaddingRight: =0
            PaddingTop: =0
            Width: =Parent.Width
            X: =378
      - Button2:
          Control: Classic/Button@2.2.0
          Properties:
            BorderStyle: =BorderStyle.None
            Fill: =RGBA(0,0,0,0)
            Height: =Parent.Height
            HoverColor: =RGBA(100,60,100,0.5)
            HoverFill: =RGBA(50,50,50,0.2)
            OnSelect: =
            RadiusBottomLeft: =0
            RadiusBottomRight: =0
            RadiusTopLeft: =0
            RadiusTopRight: =0
            Text: =
            Tooltip: =ButtonComp.TooltipText
            Width: =Parent.Width
            X: =40
